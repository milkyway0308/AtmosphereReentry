dependencies {
    api project(":packetbridge-api")
    api project(":event-api")
    api 'io.jsonwebtoken:jjwt-api:0.11.5'
    api "io.netty:netty-all:4.1.92.Final"

    compileOnly(project(":event-impl"))
    compileOnly group: 'io.github.classgraph', name: 'classgraph', version: '4.8.160'
    compileOnly "org.jetbrains.kotlin:kotlin-reflect:${rootProject.properties["kotlin_reflect_version"]}"

    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.7.2'
    implementation('io.jsonwebtoken:jjwt-impl:0.11.5')
    implementation('io.jsonwebtoken:jjwt-jackson:0.11.5')

    testCompileOnly(project(":common-impl"))
    testCompileOnly(project(":event-impl"))
    testCompileOnly('io.jsonwebtoken:jjwt-impl:0.11.5')

    testImplementation(project(":common-impl"))
    testImplementation(project(":event-impl"))
}

publishing {
    repositories {
        maven {
            name = "Snapshot"
            allowInsecureProtocol(true)
            if (rootProject.properties.get("snapshot").toString() == "true") {
                url(rootProject.properties["reposilite.snapshot"] ?: "https://YOUR_REPOSIITE_URL/")
            } else {
                url(rootProject.properties["reposilite.release"] ?: "https://YOUR_REPOSIITE_URL/")
            }
            credentials {
                username(rootProject.properties['reposilite.user'] as String ?: "YOUR_REPOSITORY_USERNAME")
                password(rootProject.properties['reposilite.token'] as String ?: "YOUR_REPOSITORY_PASSWORD")
            }
        }
    }
    publications {
        register("jar${project.name}", MavenPublication) {
            groupId 'skywolf46'
            artifactId "atmosphere-reentry-${project.name}"
            version(rootProject.properties.get("snapshot").toString() == "true" ? "${rootProject.properties['version']}-SNAPSHOT" : rootProject.properties['version'] as String)
            from components.java
        }
    }
}